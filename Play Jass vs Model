#Play Jass versus Model
import torch
import random
from torch import nn
import os

class trump_bot_module_v0(nn.Module):
  def __init__(self):
    super().__init__()
    self.layer_1 = nn.Linear(in_features=37, out_features=64)
    self.act_1 = nn.ReLU()
    self.layer_2 = nn.Linear(in_features=64, out_features=32)
    self.act_2 = nn.ReLU()
    self.layer_3 = nn.Linear(in_features=32, out_features=7)
    self.act_3 = nn.Sigmoid()



  def forward(self, x):
    return self.layer_3(self.layer_2(self.layer_1(x)))


class jass_bot_module_v3(nn.Module):
  def __init__(self):
    super().__init__()
    self.layer_1 = nn.Linear(in_features=42, out_features=80)
    self.act_1 = nn.ReLU()
    self.layer_2 = nn.Linear(in_features=80, out_features=400)
    self.act_2 = nn.ReLU()
    self.layer_3 = nn.Linear(in_features=400, out_features=56)
    self.act_3 = nn.ReLU()
    self.layer_4 = nn.Linear(in_features=56, out_features=36)
    self.act_4 = nn.Sigmoid()

  def forward(self, x):
    return self.layer_4(self.layer_3(self.layer_2(self.layer_1(x))))

def check_points():
  points = []
  for i in range (0,4):
    a = 0
    for j in range (0, len(winners[i])):
      if trump == 0:
        if card_dict[winners[i][j]][1] == 2:
          a = a + 8
        if card_dict[winners[i][j]][1] == 4:
          a = a + 10
        if card_dict[winners[i][j]][1] == 5:
          a = a + 2
        if card_dict[winners[i][j]][1] == 6:
          a = a + 3
        if card_dict[winners[i][j]][1] == 7:
          a = a + 4
        if card_dict[winners[i][j]][1] == 0:
          a = a + 11
      elif trump == 1:
        if card_dict[winners[i][j]][1] == 2:
          a = a + 8
        if card_dict[winners[i][j]][1] == 4:
          a = a + 10
        if card_dict[winners[i][j]][1] == 5:
          a = a + 2
        if card_dict[winners[i][j]][1] == 6:
          a = a + 3
        if card_dict[winners[i][j]][1] == 7:
          a = a + 4
        if card_dict[winners[i][j]][1] == 8:
          a = a + 11
      else:
        if 5 - card_dict[winners[i][j]][0] != trump:
          if card_dict[winners[i][j]][1] == 4:
            a = a + 10
          if card_dict[winners[i][j]][1] == 5:
            a = a + 2
          if card_dict[winners[i][j]][1] == 6:
            a = a + 3
          if card_dict[winners[i][j]][1] == 7:
            a = a + 4
          if card_dict[winners[i][j]][1] == 8:
            a = a + 11
        else:
          if card_dict[winners[i][j]][1] == 3:
            a = a + 14
          if card_dict[winners[i][j]][1] == 4:
            a = a + 10
          if card_dict[winners[i][j]][1] == 5:
            a = a + 20
          if card_dict[winners[i][j]][1] == 6:
            a = a + 3
          if card_dict[winners[i][j]][1] == 7:
            a = a + 4
          if card_dict[winners[i][j]][1] == 8:
            a = a + 11
    if trump == 2 or trump == 3:
      a = a * 2
    if trump == 0 or trump == 1:
      a = a * 3
    points.append(a)
  return points

def check_trick():
    a=0
    strength = []
    for p in range(len(cards_played)):
      a = 0
      if trump != 0:
            a = a + card_dict[cards_played[p]][1]
            if 5 - card_dict[cards_played[p]][0] == trump:
              a = a + int(20)
              if card_dict[cards_played[p]][1] == 3:
                a = a + 15
              if card_dict[cards_played[p]][1] == 5:
                a = a + 20
      else:
        a = a - card_dict[cards_played[p]][1]
      if card_dict[cards_played[p]][0] != card_dict[cards_played[0]][0] and 5 - card_dict[cards_played[p]][0] != trump:
        a = -10
      strength.append(a)
    winner = start_p - 1 + strength.index(max(strength))
    for i in range (20):
      print('')
    if winner >= 4:
      winner = winner - 4
    if winner == 0:
      winner1.extend(cards_played)
      print("Player1 wins")
    if winner == 1:
      winner2.extend(cards_played)
      print("Player2 wins")
    if winner == 2:
      winner3.extend(cards_played)
      print("Player3 wins")
    if winner == 3:
      winner4.extend(cards_played)
      print("Player4 wins")
    return winner

def play_card(start_p, trump):
  if players[start_p - 1] == 1:
    b = 0
    for i in range(20):
      print('')
    print("Player", start_p)
    input("press any button")
    try:
      int(last_winner)
    except ValueError:
      print("None")
    else:
      print('Player', last_winner, 'won')
    print(trumps[trump])
    print(cards_played)
    print(hands[start_p - 1])
    while b == 0:
      try:
        card_played = int(input("choose card to play, 1 = left most card, 2 = second card from the left, ...")) - 1
        if len(cards_played) != 0:
          for i in range (len(hands[start_p - 1])):
            if card_dict[hands[start_p - 1][i]][0] == card_dict[cards_played[0]][0]:
              if (card_dict[hands[start_p - 1][card_played]][0] == card_dict[cards_played[0]][0]) or (5 - card_dict[hands[start_p - 1][card_played]][0] == trump):
                b = 1
                break
              else:
                b = 0
                break
              b = 1
            else:
              b = 1
        else:
          b = 1
      except ValueError:
        print('try again')
  else:
    with torch.inference_mode():
      y_pred_hand = module_jass(x_tensors_hand[start_p - 1])
      #check only if Jass rules apply
      pos_moves = []
      pos_moves_ind = []
      f_card_high = 0
      f_card = 0
      c = 0
      x = 0
      z = 0
      y = 0
      t = 0
      for i in range (0, 4):
        if x_tensors_hand[start_p - 1][0][41 - i] == 1:
          t = i + 1
      for i in range (36):
        if x_tensors_hand[start_p - 1][0][i] > f_card_high and (x_tensors_hand[start_p - 1][0][i] % 4 == 0 or x_tensors_hand[start_p - 1][0][i] % 4 == 1):
          f_card_high = x_tensors_hand[start_p - 1][0][i]
          z = i
      if f_card_high % 4 == 1:
        f_card = z // 9 + 1
      for i in range (1, 5):
        if i == t:
          x = i
        if i == f_card:
          y = i
      if y != 0:
        for i in range ((y - 1) * 9, y * 9):
          if x_tensors_hand[start_p - 1][0][i] == -1:
            pos_moves.append(y_pred_hand[0][i])
            pos_moves_ind.append(i)
            c += 1
        if x != 0 and y != x:
          for i in range ((x - 1) * 9, x * 9):
            if x_tensors_hand[start_p - 1][0][i] == -1:
              pos_moves.append(y_pred_hand[0][i])
              pos_moves_ind.append(i)
      if c == 0:
        for i in range (36):
          if x_tensors_hand[start_p - 1][0][i] == -1:
            pos_moves.append(y_pred_hand[0][i])
            pos_moves_ind.append(i)
            c += 1
      #print(pos_moves_ind)
      card_played = pos_moves_ind[pos_moves.index(max(pos_moves))]
      for i in range (len(hands[start_p - 1])):
        if card_played == card_dict[hands[start_p - 1][i]][0] * 9 + card_dict[hands[start_p - 1][i]][1]:
          card_played = i
      #print(card_played)
      #print(hands[start_p - 1])
  return card_played

def choose_trump(start_p, trump, gschobe):
  trump_values_tss = []
  if players[start_p - 1] == 1:
    for i in range (20):
      print('')
    print("Player", start_p)
    input("press any button")
    print(hands[start_p - 1])
    while trump != 0 and trump != 1 and trump != 2 and trump != 3 and trump != 4 and trump != 5:
      try:
        trump = int(input("choose trump, Uneufe = 1, Obeabe = 2, Club = 3, Spade = 4, Heart = 5, Diamond = 6, Schiebe = 7")) - 1
        if trump == 6:
          if gschobe == 0:
            print("gschobe")
            if start_p == 3 or start_p == 4:
              start_p = start_p - 2
              x_tensors_trump[start_p - 1][0][36] = 1
              gschobe = 1
              trump = choose_trump(start_p, trump, gschobe)
              start_p = start_p + 2
            else:
              start_p = start_p + 2
              x_tensors_trump[start_p - 1][0][36] = 1
              gschobe = 1
              trump = choose_trump(start_p, trump, gschobe)
              start_p = start_p - 2
      except ValueError:
        print('try again')
  else:
    '''
    with torch.inference_mode():
      y_pred_trump = module_trump(x_tensors_trump[start_p - 1])
      y_pred_trump[0][6] -= 0.53
      while trump != 0 and trump != 1 and trump != 2 and trump != 3 and trump != 4 and trump != 5:
        if x_tensors_trump[start_p - 1][0][36] == 1:
          for i in range (6):
            trump_values_tss.append(y_pred_trump[0][i])
          trump = trump_values_tss.index(max(trump_values_tss))
        else:
          trump = torch.argmax(y_pred_trump, dim = 1).item()
        if trump == 6:
          if start_p == 3 or start_p == 4:
              start_p = start_p - 2
              x_tensors_trump[start_p - 1][0][36] = 1
              gschobe = 1
              print("gschobe")
              trump = choose_trump(start_p, trump, gschobe)
              start_p = start_p + 2
          else:
            start_p = start_p + 2
            x_tensors_trump[start_p - 1][0][36] = 1
            gschobe = 1
            print("gschobe")
            trump = choose_trump(start_p, trump, gschobe)
            start_p = start_p - 2
    '''
  gsch = 0
  while trump != 0 and trump != 1 and trump != 2 and trump != 3 and trump != 4 and trump != 5:
    diamond = 0
    heart = 0
    spade = 0
    club = 0
    obeabe = 0
    uneufe = 0
    trump_points = [uneufe, obeabe, club, spade, heart, diamond]

    for j in range (4):
      if x_tensors_trump[start_p - 1][0][j * 9 + 8] == 1:
        trump_points[5 - j] += 15
      if x_tensors_trump[start_p - 1][0][j * 9 + 7] == 1:
        trump_points[5 - j] += 10
      if x_tensors_trump[start_p - 1][0][j * 9 + 6] == 1:
        trump_points[5 - j] += 7
      if x_tensors_trump[start_p - 1][0][j * 9 + 5] == 1:
        trump_points[5 - j] += 25
      if x_tensors_trump[start_p - 1][0][j * 9 + 4] == 1:
        trump_points[5 - j] += 6
      if x_tensors_trump[start_p - 1][0][j * 9 + 3] == 1:
        trump_points[5 - j] += 19
      if x_tensors_trump[start_p - 1][0][j * 9 + 2] == 1:
        trump_points[5 - j] += 5
      if x_tensors_trump[start_p - 1][0][j * 9 + 1] == 1:
        trump_points[5 - j] += 5
      if x_tensors_trump[start_p - 1][0][j * 9 + 0] == 1:
        trump_points[5 - j] += 5
      for i in range (0, j):
        if x_tensors_trump[start_p - 1][0][i * 9 + 8] == 1:
          trump_points[5 - j] += 9
        if x_tensors_trump[start_p - 1][0][i * 9 + 7] == 1:
          trump_points[5 - j] += 7
        if x_tensors_trump[start_p - 1][0][i * 9 + 6] == 1:
          trump_points[5 - j] += 5
        if x_tensors_trump[start_p - 1][0][i * 9 + 5] == 1:
          trump_points[5 - j] += 2
        if x_tensors_trump[start_p - 1][0][i * 9 + 4] == 1:
          trump_points[5 - j] += 1
      for i in range (j + 1, 4):
        if x_tensors_trump[start_p - 1][0][i * 9 + 8] == 1:
          trump_points[5 - j] += 9
        if x_tensors_trump[start_p - 1][0][i * 9 + 7] == 1:
          trump_points[5 - j] += 7
        if x_tensors_trump[start_p - 1][0][i * 9 + 6] == 1:
          trump_points[5 - j] += 5
        if x_tensors_trump[start_p - 1][0][i * 9 + 5] == 1:
          trump_points[5 - j] += 2
        if x_tensors_trump[start_p - 1][0][i * 9 + 4] == 1:
          trump_points[5 - j] += 1
    for j in range (4, 6):
      for i in range (4):
        if j == 4:
          if x_tensors_trump[start_p - 1][0][i * 9 + 8] == 1:
            trump_points[5 - j] += 14
          if x_tensors_trump[start_p - 1][0][i * 9 + 7] == 1:
            trump_points[5 - j] += 10
          if x_tensors_trump[start_p - 1][0][i * 9 + 6] == 1:
            trump_points[5 - j] += 8
          if x_tensors_trump[start_p - 1][0][i * 9 + 5] == 1:
            trump_points[5 - j] += 7
          if x_tensors_trump[start_p - 1][0][i * 9 + 4] == 1:
            trump_points[5 - j] += 5
          if x_tensors_trump[start_p - 1][0][i * 9 + 2] == 1:
            trump_points[5 - j] += 5
        else:
          if x_tensors_trump[start_p - 1][0][i * 9 + 7] == 1:
            trump_points[5 - j] += 2
          if x_tensors_trump[start_p - 1][0][i * 9 + 6] == 1:
            trump_points[5 - j] += 1
          if x_tensors_trump[start_p - 1][0][i * 9 + 5] == 1:
            trump_points[5 - j] += 1
          if x_tensors_trump[start_p - 1][0][i * 9 + 4] == 1:
            trump_points[5 - j] += 5
          if x_tensors_trump[start_p - 1][0][i * 9 + 3] == 1:
            trump_points[5 - j] += 5
          if x_tensors_trump[start_p - 1][0][i * 9 + 2] == 1:
            trump_points[5 - j] += 7
          if x_tensors_trump[start_p - 1][0][i * 9 + 1] == 1:
            trump_points[5 - j] += 9
          if x_tensors_trump[start_p - 1][0][i * 9 + 0] == 1:
            trump_points[5 - j] += 11
    if x_tensors_trump[start_p - 1][0][36] == 0:
      if max(trump_points) <= 65:
        y_pred_trump = 6
      else:
        if max(trump_points) <= 45:
          trump_points[5] = trump_points[5] * 1.5
          trump_points[4] = trump_points[4] * 1.5
          trump_points[3] = trump_points[3] * 1.2
          trump_points[2] = trump_points[2] * 1.2
        elif max(trump_points) <= 60:
          trump_points[5] = trump_points[5] * 1.2
          trump_points[4] = trump_points[4] * 1.2
          trump_points[3] = trump_points[3] * 1.1
          trump_points[2] = trump_points[2] * 1.1
        elif max(trump_points) > 75:
          trump_points[0] = trump_points[0] * 1.5
          trump_points[1] = trump_points[1] * 1.5
          trump_points[3] = trump_points[3] * 1.2
          trump_points[2] = trump_points[2] * 1.2
        y_pred_trump = trump_points.index(max(trump_points))
    else:
      if max(trump_points) <= 45:
        trump_points[5] = trump_points[5] * 1.5
        trump_points[4] = trump_points[4] * 1.5
        trump_points[3] = trump_points[3] * 1.2
        trump_points[2] = trump_points[2] * 1.2
      elif max(trump_points) <= 60:
        trump_points[5] = trump_points[5] * 1.2
        trump_points[4] = trump_points[4] * 1.2
        trump_points[3] = trump_points[3] * 1.1
        trump_points[2] = trump_points[2] * 1.1
      elif max(trump_points) > 75:
        trump_points[0] = trump_points[0] * 1.5
        trump_points[1] = trump_points[1] * 1.5
        trump_points[3] = trump_points[3] * 1.2
        trump_points[2] = trump_points[2] * 1.2
      y_pred_trump = trump_points.index(max(trump_points))
    trump = y_pred_trump
    if trump == 6:
      gsch = 1
      if start_p == 3 or start_p == 4:
        start_p = start_p - 2
        x_tensors_trump[start_p - 1][0][36] = 1
        print("gschobe")
        trump = choose_trump(start_p, trump, gschobe)
        start_p = start_p + 2
      else:
        start_p = start_p + 2
        x_tensors_trump[start_p - 1][0][36] = 1
        print("gschobe")
        trump = choose_trump(start_p, trump, gschobe)
        start_p = start_p - 2
  return trump

from google.colab import drive
from google.colab import files

drive.mount("/content/drive")

g_over = False

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
module_trump = trump_bot_module_v0().to(device)
module_jass = jass_bot_module_v3().to(device)
if device == torch.device("cuda"):
  #module_trump.load_state_dict(torch.load('/content/drive/MyDrive/model_trump_0_state_dict_final.pt'))
  module_jass.load_state_dict(torch.load('/content/drive/MyDrive/model_3_state_dict_final.pt'))
else:
  #module_trump.load_state_dict(torch.load('/content/drive/MyDrive/model_trump_0_state_dict_final.pt', map_location=torch.device('cpu')))
  module_jass.load_state_dict(torch.load('/content/drive/MyDrive/model_3_state_dict_final.pt', map_location=torch.device('cpu')))
module_trump.eval()
module_jass.eval()

card_dict = {'Diamond6' : [0, 0], 'Diamond7' : [0, 1], 'Diamond8' : [0, 2], 'Diamond9' : [0, 3], 'Diamond10' : [0, 4], 'DiamondJack' : [0, 5], 'DiamondQueen' : [0, 6], 'DiamondKing' : [0, 7], 'DiamondAce' : [0, 8], 'Heart6' : [1, 0], 'Heart7' : [1, 1], 'Heart8' : [1, 2], 'Heart9' : [1, 3], 'Heart10' : [1, 4], 'HeartJack' : [1, 5], 'HeartQueen' : [1, 6], 'HeartKing' : [1, 7], 'HeartAce' : [1, 8], 'Spade6' : [2, 0], 'Spade7' : [2, 1], 'Spade8' : [2, 2], 'Spade9' : [2, 3], 'Spade10' : [2, 4], 'SpadeJack' : [2, 5], 'SpadeQueen' : [2, 6], 'SpadeKing' : [2, 7], 'SpadeAce' : [2, 8], 'Club6' : [3, 0], 'Club7' : [3, 1], 'Club8' : [3, 2], 'Club9' : [3, 3], 'Club10' : [3, 4], 'ClubJack' : [3, 5], 'ClubQueen' : [3, 6], 'ClubKing' : [3, 7], 'ClubAce' : [3, 8]}
trumps = {5 : ['Diamond'], 4 : ['Heart'], 3 : ['Spade'], 2 : ['Club'], 1 : ['Obeabe'], 0 : ['Uneufe']}
team_1_points = 0
team_2_points = 0

players = []
start_p = 0
last_winner = 'None'

winner1 = []
winner2 = []
winner3 = []
winner4 = []
winners = [winner1, winner2, winner3, winner4]

var = 0

while var == 0:
  try:
    points_to_win = int(input("points to win 'normally 2500'"))
    var = 1
  except ValueError:
    print('try again')

for i in range (4):
  hello = 0
  while hello != 1:
    try:
      print("Player", i + 1, "=", end=" " )
      players.append(int(input("0 = Bot, 1 = Player ")))
      if players[i] == 0 or players[i] == 1:
        hello = 1
      else:
        players.pop(i)
    except ValueError:
      print('try again')

while start_p != 1 and start_p != 2 and start_p != 3 and start_p != 4:
  try:
    start_p = int(input("Player to start: 1 = P1, 2 = P2, 3 = P3, 4 = P4"))
    trump_player = start_p
  except ValueError:
    print('try again')

#game loop
while team_1_points < points_to_win and team_2_points < points_to_win:
  check_match_1 = 0
  check_match_2 = 0
  start_p = trump_player

  x_trump_1 = torch.zeros(1, 37).to(device)
  x_trump_2 = torch.zeros(1, 37).to(device)
  x_trump_3 = torch.zeros(1, 37).to(device)
  x_trump_4 = torch.zeros(1, 37).to(device)
  x_tensors_trump = [x_trump_1, x_trump_2, x_trump_3, x_trump_4]
  x_hand_1 = torch.zeros(1, 42).to(device)
  x_hand_2 = torch.zeros(1, 42).to(device)
  x_hand_3 = torch.zeros(1, 42).to(device)
  x_hand_4 = torch.zeros(1, 42).to(device)
  x_tensors_hand = [x_hand_1, x_hand_2, x_hand_3, x_hand_4]

  trump = -1
  card_played = 0
  counter = 1
  cards_played = []
  played = False

  P1_hand = []
  P2_hand = []
  P3_hand = []
  P4_hand = []

  P1_hand_sorted = []
  P2_hand_sorted = []
  P3_hand_sorted = []
  P4_hand_sorted = []

  hands = [P1_hand, P2_hand, P3_hand, P4_hand]

  cards = ['Diamond6', 'Diamond7', 'Diamond8', 'Diamond9', 'Diamond10', 'DiamondJack', 'DiamondQueen', 'DiamondKing', 'DiamondAce', 'Heart6', 'Heart7', 'Heart8', 'Heart9', 'Heart10', 'HeartJack', 'HeartQueen', 'HeartKing', 'HeartAce', 'Spade6', 'Spade7', 'Spade8', 'Spade9', 'Spade10', 'SpadeJack', 'SpadeQueen', 'SpadeKing', 'SpadeAce', 'Club6', 'Club7', 'Club8', 'Club9', 'Club10', 'ClubJack', 'ClubQueen', 'ClubKing', 'ClubAce']

  for i in range(9):
    x = cards.pop(random.randint(0, len(cards) - 1))
    P1_hand.append(x)
    y = cards.pop(random.randint(0, len(cards) - 1))
    P2_hand.append(y)
    z = cards.pop(random.randint(0, len(cards) - 1))
    P3_hand.append(z)
    w = cards.pop(random.randint(0, len(cards) - 1))
    P4_hand.append(w)

    for j in range (4):
      x_tensors_trump[j][0][card_dict[hands[j][i]][0] * 9 + card_dict[hands[j][i]][1]] = 1
      x_tensors_hand[j][0][card_dict[hands[j][i]][0] * 9 + card_dict[hands[j][i]][1]] = -1

  for k in range (4):
    for i in range(9):
        for j in range(0, 9 - i - 1):
            if card_dict[hands[k][j]][0] * 9 + card_dict[hands[k][j]][1] > card_dict[hands[k][j + 1]][0] * 9 + card_dict[hands[k][j + 1]][1]:
                hands[k][j], hands[k][j + 1] = hands[k][j + 1], hands[k][j]
  gschobe = 0
  trump = choose_trump(start_p, trump, gschobe)
  print("trump =", trumps[trump])
  for i in range (4):
    x_tensors_hand[i][0][36 + trump] = 1
    #print(x_tensors_hand[i])
  for k in range (9):
    cards_played = []
    for i in range (4):
      while played == False:
        card_played = play_card(start_p, trump)
        for j in range(0, len(hands[start_p - 1])):
          if card_played == j:
            played = True
      cards_played.append(hands[start_p - 1][card_played])
      for j in range (4):
        x_tensors_hand[j][0][card_dict[hands[start_p - 1][card_played]][0] * 9 + card_dict[hands[start_p - 1][card_played]][1]] = counter
        #print(x_tensors_hand[j])
      counter += 1
      hands[start_p - 1].pop(card_played)
      #print(cards_played)
      if start_p < 4:
        start_p += 1
      else:
        start_p = 1
      played = False
    start_p = check_trick() + 1
    last_winner = int(start_p)
    points = check_points()
    #print(points)
    winner1 = []
    winner2 = []
    winner3 = []
    winner4 = []
    winners = [winner1, winner2, winner3, winner4]
    team_1_points = team_1_points + points[0] + points[2]
    team_2_points = team_2_points + points[1] + points[3]
    check_match_1 += points[0] + points[2]
    check_match_2 += points[1] + points[3]
    print(cards_played)

    input('press any button')
    if team_1_points >= points_to_win or team_2_points >= points_to_win:
      g_over = True
      break
  if g_over == False:
    if trump == 2 or trump == 3:
      if check_match_1 == 0:
        team_2_points += 200
      elif check_match_2 == 0:
        team_1_points += 200
      if start_p - 1 % 2 == 0:
        team_1_points += 10
      else:
        team_2_points += 10
    elif trump == 0 or trump == 1:
      if check_match_1 == 0:
        team_2_points += 300
      elif check_match_2 == 0:
        team_1_points += 300
      if start_p - 1 % 2 == 0:
        team_1_points += 15
      else:
        team_2_points += 15
    else:
      if check_match_1 == 0:
        team_2_points += 100
      elif check_match_2 == 0:
        team_1_points += 100
      if start_p - 1 % 2 == 0:
        team_1_points += 5
      else:
        team_2_points += 5

    print("Team 1 Points", team_1_points)
    print("Team 2 Points", team_2_points)
    input('press any button')

    trump_player += 1
    if trump_player > 4:
      trump_player = 1

if team_1_points >= points_to_win and team_2_points < team_1_points:
  print("Team 1 Points", team_1_points)
  print("Team 2 Points", team_2_points)
  print("Team 1 Wins")
elif team_2_points >= points_to_win and team_1_points < team_2_points:
  print("Team 1 Points", team_1_points)
  print("Team 2 Points", team_2_points)
  print("Team 2 Wins")
elif team_1_points >= 2500 and team_2_points == team_1_points:
  print("draw")
  print("Team 1 Points", team_1_points)
  print("Team 2 Points", team_2_points)
#case where have to play other card exept jack//
